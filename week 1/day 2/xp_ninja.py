# -*- coding: utf-8 -*-
"""xp ninja

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MevlDVZ13iknN2Rw0UnSO57zNTHK_5C4

Instructions
Write a program that calculates and prints a value according to this given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H:
C is 50.
H is 30.
Ask the user for a comma-separated string of numbers, use each number from the user as D in the formula and return all the results
For example, if the user inputs: 100,150,180
The output should be:

18,22,24
"""

import math

c = 50
h = 30

input_string = input("Enter comma-separated numbers: ")

d_values = [int(x) for x in input_string.split(',')]

results = []
for d in d_values:
  q = round(math.sqrt((2 * c * d) / h))
  results.append(q)

# Print the results as a comma-separated string
print(",".join(map(str, results)))

"""Exercise 2 : List of integers
Instructions
Given a list of 10 integers to analyze. For example:

    [3, 47, 99, -80, 22, 97, 54, -23, 5, 7]
    [44, 91, 8, 24, -6, 0, 56, 8, 100, 2]
    [3, 21, 76, 53, 9, -82, -3, 49, 1, 76]
    [18, 19, 2, 56, 33, 17, 41, -63, -82, 1]
Store the list of numbers in a variable.
Print the following information:
a. The list of numbers – printed in a single line
b. The list of numbers – sorted in descending order (largest to smallest)
c. The sum of all the numbers
A list containing the first and the last numbers.
A list of all the numbers greater than 50.
A list of all the numbers smaller than 10.
A list of all the numbers squared – eg. for [1, 2, 3] you would print “1 4 9”.
The numbers without any duplicates – also print how many numbers are in the new list.
The average of all the numbers.
The largest number.
10.The smallest number.
11.Bonus: Find the sum, average, largest and smallest number without using built in functions.
12.Bonus: Instead of using pre-defined lists of numbers, ask the user for 10 numbers between -100 and 100. Ask the user for an integer between -100 and 100 – repeat this question 10 times. Each number should be added into a variable that you created earlier.
13.Bonus: Instead of asking the user for 10 integers, generate 10 random integers yourself. Make sure that these random integers are between -100 and 100.
14.Bonus: Instead of always generating 10 integers, let the amount of integers also be random! Generate a random positive integer no smaller than 50.
15.Bonus: Will the code work when the number of random numbers is not equal to 10?

"""

list1 =[3, 47, 99, -80, 22, 97, 54, -23, 5, 7,
44, 91, 8, 24, -6, 0, 56, 8, 100, 2 ,3, 21, 76, 53, 9, -82, -3, 49, 1, 76,
18, 19, 2, 56, 33, 17, 41, -63, -82, 1]
print(list1)
sorted_list = sorted(list1, reverse=True)
print(sorted_list)
import math
def calculate_sum(numbers):
  total = 0
  for number in numbers:
    total += number
  return total
sum_of_numbers = calculate_sum(list1)
print(sum_of_numbers)

first_and_last = [list1[0], list1[-1]]
print(first_and_last)
greater_than_50 = [x for x in list1 if x > 50]
print(greater_than_50)
smaller_than_10 = [x for x in list1 if x < 10]
print(smaller_than_10)
squared_list = [x**2 for x in list1]
print(squared_list)
unique_list = list(set(list1))
print(unique_list)
largest = max(list1)
print(largest)
smallest = min(list1)
print(smallest)

"""ercise 3: Working on a paragraph
Find an interesting paragraph of text online. (Please keep it appropriate to the social context of our class.)
Paste it to your code, and store it in a variable.
Let’s analyze the paragraph. Print out a nicely formatted message saying:
How many characters it contains (this one is easy…).
How many sentences it contains.
How many words it contains.
How many unique words it contains.
Bonus: How many non-whitespace characters it contains.
Bonus: The average amount of words per sentence in the paragraph.
Bonus: the amount of non-unique words in the paragraph.

"""

import re

my_paragraph = "If you think you’re enlightened, spend a week with your family"

# Character count
char_count = len(my_paragraph)
print(f"Number of characters: {char_count}")

# Sentence count
sentence_count = len(re.split(r'[.!?]+', my_paragraph)) - 1
print(f"Number of sentences: {sentence_count}")

# Word count
words = re.findall(r'\b\w+\b', my_paragraph)
word_count = len(words)
print(f"Number of words: {word_count}")

# Unique word count
unique_words = set(words)
unique_word_count = len(unique_words)
print(f"Number of unique words: {unique_word_count}")

"""
Exercise 4 : Frequency Of The Words
Instructions
Write a program that prints the frequency of the words from the input.

Suppose the following input is supplied to the program:
New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python 3.

Then, the output should be:

    2:2
    3.:1
    3?:1
    New:1
    Python:5
    Read:1
    and:1
    between:1
    choosing:1
    or:2
    to:1
"""

import re
from collections import Counter

def word_frequency(text):
    words = re.findall(r'\b\w+\b|[.?!]', text)
    word_counts = Counter(words)
    for word, count in sorted(word_counts.items()):
        print(f"{word}:{count}")

text = "New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python 3."
word_frequency(text)