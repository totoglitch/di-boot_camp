# -*- coding: utf-8 -*-
"""daily challenge 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fySuRKBVAgEllCrAJoi8EkTi0959S9B-

Instructions
Here is a python code that generates a list of 20000 random numbers, called list_of_numbers, and a target number.

import random

list_of_numbers = [random.randint(0, 10000) for _ in range(20000)]

target_number   = 3728


Copy this code, and create a program that finds, within list_of_numbers all the pairs of number that sum to the target number

For example
"""

import random

# Generate a list of 20000 random numbers between 0 and 10000
list_of_numbers = [random.randint(0, 10000) for _ in range(20000)]

# Define the target number
target_number = 3278

# Create a set to store the numbers we've seen so far
seen_numbers = set()

# Create a list to store the pairs of numbers that sum to the target number
pairs = []

# Iterate through the list of numbers
for number in list_of_numbers:
  # Calculate the complement (the number needed to reach the target)
  complement = target_number - number

  # If the complement is in the set of seen numbers, it means we've found a pair
  if complement in seen_numbers:
    pairs.append((number, complement))

  # Add the current number to the set of seen numbers
  seen_numbers.add(number)

# Print the pairs of numbers that sum to the target number
print("Pairs of numbers that sum to", target_number, ":")
for pair in pairs:
  print(pair)