# -*- coding: utf-8 -*-
"""challenge 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yhx2BNk9porhKLfnShMcPEHCqddQYMDQ

Exercise 1
Instructions
Write a script that inserts an item at a defined index in a list.
"""

def insert_item_at_index(my_list, item, index):
  """
  Inserts an item into a list at a specified index.

  Args:
    my_list: The list to insert into.
    item: The item to insert.
    index: The index to insert at.

  Returns:
    The modified list.
  """
  my_list.insert(index, item)
  return my_list

# Example usage
my_list = [1, 2, 3, 4, 5]
item_to_insert = 10
index_to_insert_at = 2

new_list = insert_item_at_index(my_list, item_to_insert, index_to_insert_at)
new_list

"""Exercise 2
Instructions
Write a script that counts the number of spaces in a string.


"""

def count_spaces(input_string):
  """
  Counts the number of spaces in a string.

  Args:
    input_string: The string to count spaces in.

  Returns:
    The number of spaces in the string.
  """
  space_count = 0
  for char in input_string:
    if char == " ":
      space_count += 1
  return space_count


# Example usage
my_string = "This is a string with spaces."
number_of_spaces = count_spaces(my_string)
print("Number of spaces:", number_of_spaces)

"""Exercise 3
Instructions
Write a script that calculates the number of upper case letters and lower case letters in a string.


"""

def count_upper_lower(input_string):
  """
  Calculates the number of upper case and lower case letters in a string.

  Args:
    input_string: The string to analyze.

  Returns:
    A tuple containing the number of upper case letters and lower case letters.
  """
  upper_count = 0
  lower_count = 0
  for char in input_string:
    if char.isupper():
      upper_count += 1
    elif char.islower():
      lower_count += 1
  return upper_count, lower_count

# Example usage
my_string = "This Is A String With Upper And Lower Case Letters."
upper_case_count, lower_case_count = count_upper_lower(my_string)
print("Number of upper case letters:", upper_case_count)
print("Number of lower case letters:", lower_case_count)

"""Exercise 4
Instructions
Write a function to find the sum of an array without using the built in function:

>>>my_sum([1,5,4,2])
>>>12

"""

def my_sum(arr):
  """
  Calculates the sum of elements in an array without using built-in functions.

  Args:
    arr: The array to calculate the sum for.

  Returns:
    The sum of the elements in the array.
  """
  sum = 0
  for num in arr:
    sum += num
  return sum

# Example usage
array = [1, 5, 4, 2]
sum_of_array = my_sum(array)
print(sum_of_array)  # Output: 12

"""Exercise 5
Instructions
Write a function to find the max number in a list

>>>find_max([0,1,3,50])
>>>50

"""

def find_max(my_list):
  """
  Finds the maximum number in a list.

  Args:
    my_list: The list to find the maximum number in.

  Returns:
    The maximum number in the list.
  """
  if not my_list:
    return None

  max_num = my_list[0]
  for num in my_list:
    if num > max_num:
      max_num = num
  return max_num

# Example usage
my_list = [0, 1, 3, 50]
max_number = find_max(my_list)
print(max_number)  # Output: 50

"""Exercise 6
Instructions
Write a function that returns factorial of a number

>>>factorial(4)
>>>24



"""

def factorial(n):
  """
  Calculates the factorial of a number.

  Args:
    n: The number to calculate the factorial for.

  Returns:
    The factorial of n.
  """
  if n == 0:
    return 1
  else:
    result = 1
    for i in range(1, n + 1):
      result *= i
    return result

# Example usage
number = 4
factorial_of_number = factorial(number)
print(factorial_of_number)  # Output: 24

"""Exercise 7
Instructions
Write a function that counts an element in a list (without using the count method):

>>>list_count(['a','a','t','o'],'a')
>>>2

"""

def list_count(my_list, element):
  """
  Counts the number of occurrences of an element in a list without using the count method.

  Args:
    my_list: The list to search in.
    element: The element to count.

  Returns:
    The number of times the element appears in the list.
  """
  count = 0
  for item in my_list:
    if item == element:
      count += 1
  return count

# Example usage
my_list = ['a', 'a', 't', 'o']
element_to_count = 'a'
count_of_element = list_count(my_list, element_to_count)
print(count_of_element)  # Output: 2

"""Exercise 8
Instructions
Write a function that returns the L2-norm (square root of the sum of squares) of the sum of a list:

>>>norm([1,2,2])
>>>3

"""

import math

def norm(my_list):
  """
  Calculates the L2-norm (square root of the sum of squares) of a list.

  Args:
    my_list: The list to calculate the L2-norm for.

  Returns:
    The L2-norm of the list.
  """
  sum_of_squares = 0
  for num in my_list:
    sum_of_squares += num**2
  return math.sqrt(sum_of_squares)


# Example usage
my_list = [1, 2, 2]
l2_norm = norm(my_list)
print(l2_norm)  # Output: 3.0

"""Exercise 9
Instructions
Write a function to find if an array is monotonic (sorted either ascending of descending)

>>>is_mono([7,6,5,5,2,0])
>>>True

>>>is_mono([2,3,3,3])
>>>True

>>>is_mono([1,2,0,4])
>>>False

"""

def is_mono(arr):
  """
  Checks if an array is monotonic (sorted either ascending or descending).

  Args:
    arr: The array to check.

  Returns:
    True if the array is monotonic, False otherwise.
  """
  increasing = True
  decreasing = True

  for i in range(1, len(arr)):
    if arr[i] < arr[i - 1]:
      increasing = False
    if arr[i] > arr[i - 1]:
      decreasing = False

  return increasing or decreasing

# Example usage
print(is_mono([7, 6, 5, 5, 2, 0]))  # Output: True
print(is_mono([2, 3, 3, 3]))  # Output: True
print(is_mono([1, 2, 0, 4]))  # Output: False

"""Exercise 10
Instructions
Write a function that prints the longest word in a list.




"""

def longest_word(word_list):
  """
  Finds and prints the longest word in a list of words.

  Args:
    word_list: A list of words.
  """
  if not word_list:
    print("The list is empty.")
    return

  longest = ""
  for word in word_list:
    if len(word) > len(longest):
      longest = word

  print("The longest word is:", longest)


# Example usage:
words = ["apple", "banana", "orange", "grapefruit"]
longest_word(words)

"""Exercise 11
Instructions
Given a list of integers and strings, put all the integers in one list, and all the strings in another one.


"""

def separate_lists(input_list):
  """
  Separates a list of integers and strings into two separate lists, one for integers and one for strings.

  Args:
    input_list: The list to separate.

  Returns:
    A tuple containing two lists: the first list contains the integers, and the second list contains the strings.
  """
  integer_list = []
  string_list = []

  for item in input_list:
    if isinstance(item, int):
      integer_list.append(item)
    elif isinstance(item, str):
      string_list.append(item)

  return integer_list, string_list

# Example usage:
mixed_list = [1, 'apple', 2, 'banana', 3, 'orange', 4, 'grapefruit']
integer_list, string_list = separate_lists(mixed_list)
print("Integers:", integer_list)
print("Strings:", string_list)

"""Exercise 12
Instructions
Write a function to check if a string is a palindrome:

>>>is_palindrome('radar')
>>>True

>>>is_palindrome('John)
>>>False

"""

def is_palindrome(input_string):
  """
  Checks if a string is a palindrome.

  Args:
    input_string: The string to check.

  Returns:
    True if the string is a palindrome, False otherwise.
  """
  processed_string = input_string.lower()
  return processed_string == processed_string[::-1]

# Example usage:
print(is_palindrome('radar'))
print(is_palindrome('John'))

"""
Exercise 13
Instructions
Write a function that returns the amount of words in a sentence with length > k:

>>>sentence = 'Do or do not there is no try'
>>>k=2
>>>sum_over_k(sentence,k)
>>>3
"""

def sum_over_k(sentence, k):
  """
  Counts the number of words in a sentence with length greater than k.

  Args:
    sentence: The input sentence.
    k: The minimum word length to count.

  Returns:
    The number of words with length greater than k.
  """
  words = sentence.split()
  count = 0
  for word in words:
    if len(word) > k:
      count += 1
  return count

# Example usage
sentence = 'Do or do not there is no try'
k = 2
result = sum_over_k(sentence, k)
print(result)

"""Exercise 14
Instructions
Write a function that returns the average value in a dictionary (assume the values are numeric):

>>>dict_avg({'a': 1,'b':2,'c':8,'d': 1})
>>>3



"""

def dict_avg(my_dict):
  """
  Calculates the average value in a dictionary (assuming values are numeric).

  Args:
    my_dict: The dictionary to calculate the average for.

  Returns:
    The average value in the dictionary, or 0 if the dictionary is empty.
  """
  if not my_dict:
    return 0

  total_sum = sum(my_dict.values())
  return total_sum / len(my_dict)


# Example usage
my_dict = {'a': 1, 'b': 2, 'c': 8, 'd': 1}
average_value = dict_avg(my_dict)
print(average_value)

"""
Exercise 15
Instructions
Write a function that returns common divisors of 2 numbers:

>>>common_div(10,20)
>>>[2,5,10]
"""

def common_div(a, b):
  """
  Finds the common divisors of two numbers.

  Args:
    a: The first number.
    b: The second number.

  Returns:
    A list of common divisors.
  """
  common_divisors = []
  for i in range(1, min(a, b) + 1):
    if a % i == 0 and b % i == 0:
      common_divisors.append(i)
  return common_divisors

# Example usage
num1 = 10
num2 = 20
result = common_div(num1, num2)
print(result)

"""Exercise 16
Instructions
Write a function that test if a number is prime:

>>>is_prime(11)
>>>True

"""

def is_prime(n):
  """
  Checks if a number is prime.

  Args:
    n: The number to check.

  Returns:
    True if the number is prime, False otherwise.
  """
  if n <= 1:
    return False
  for i in range(2, int(n**0.5) + 1):
    if n % i == 0:
      return False
  return True

# Example usage
number = 11
if is_prime(number):
  print(f"{number} is a prime number.")
else:
  print(f"{number} is not a prime number.")

"""
Exercise 17
Instructions
Write a function that prints elements of a list if the index and the value are even:

>>>weird_print([1,2,2,3,4,5])
>>>[2,4]
"""

def weird_print(my_list):
  """
  Prints elements of a list if the index and the value are both even.

  Args:
    my_list: The list to check.
  """
  result = []
  for index, value in enumerate(my_list):
    if index % 2 == 0 and value % 2 == 0:
      result.append(value)
  return result

# Example usage
my_list = [1, 2, 2, 3, 4, 5]
print(weird_print(my_list))

"""Exercise 18
Instructions
Write a function that accepts an undefined number of keyworded arguments and return the count of different types:

>>>type_count(a=1,b='string',c=1.0,d=True,e=False)
>>>int: 1, str:1 , float:1, bool:2

"""

def type_count(**kwargs):
  """
  Counts the number of different types of values in a dictionary of keyword arguments.

  Args:
    **kwargs: A dictionary of keyword arguments.

  Returns:
    A dictionary where keys are the types and values are the counts.
  """
  type_counts = {}
  for value in kwargs.values():
    value_type = type(value)
    if value_type not in type_counts:
      type_counts[value_type] = 0
    type_counts[value_type] += 1
  return type_counts

result = type_count(a=1, b='string', c=1.0, d=True, e=False)
print("int:", result.get(int, 1), ", str:", result.get(str, 1), ", float:", result.get(float, 1), ", bool:", result.get(bool, 2))

"""Exercise 19
Instructions
Write a function that mimics the builtin .split() method for strings.

By default the function uses whitespace but it should be able to take an argument for any character and split with that argument.


"""

def my_split(string, delimiter=" "):
  """
  Mimics the built-in .split() method for strings.

  Args:
    string: The string to split.
    delimiter: The delimiter to split the string by (default is whitespace).

  Returns:
    A list of substrings.
  """
  result = []
  current_substring = ""
  for char in string:
    if char == delimiter:
      if current_substring:
        result.append(current_substring)
        current_substring = ""
    else:
      current_substring += char
  if current_substring:
    result.append(current_substring)
  return result

string_to_split = "This is a string to split"
split_list = my_split(string_to_split)
print(split_list)
string_to_split_with_comma = "This,is,a,string,to,split,with,commas"
split_list_with_comma = my_split(string_to_split_with_comma, ",")
print(split_list_with_comma)

"""Exercise 20
Instructions
Convert a string into password format.

Example:
input : "mypassword"
output: "***********"

"""

def convert_to_password_format(input_string):
  """
  Converts a string into password format (e.g., "mypassword" becomes "**********").

  Args:
    input_string: The string to convert.

  Returns:
    The string in password format.
  """
  return "*" * len(input_string)


input_string = "mypassword"
password_format_string = convert_to_password_format(input_string)
print(password_format_string)