# -*- coding: utf-8 -*-
"""challenge

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yhx2BNk9porhKLfnShMcPEHCqddQYMDQ

Exercise 1
Instructions
Draw the following pattern using for loops:
  *
 ***
*****


Draw the following pattern using for loops:
    *
   **
  ***
 ****
*****


Draw the following pattern using for loops:
*
**
***
****
*****
*****
 ****
  ***
   **
    *
"""

for i in range(rows):
  print(" " * (rows - i - 1) + "*" * (2 * i + 1))


# Pattern 2
rows = 5
for i in range(rows):
  print(" " * (rows - i - 1) + "*" * (i + 1))


# Pattern 3
rows = 5
for i in range(rows):
  print("*" * (i + 1))
for i in range(rows):
  print("*" * (rows - i))

for i in range(rows):
    print(" " * (i) + "*" * (rows - i))

"""Exercise 2
Instructions
Analyse this code before executing it. Write some commnts next to each line. Write the value of each variable and their changes, and add the final output. Try to understand the purpose of this program.
my_list = [2, 24, 12, 354, 233]
for i in range(len(my_list) - 1):
    minimum = i
    for j in range( i + 1, len(my_list)):
        if(my_list[j] < my_list[minimum]):
            minimum = j
            if(minimum != i):
                my_list[i], my_list[minimum] = my_list[minimum], my_list[i]
print(my_list)

"""

rows = 5  # Sets the number of rows for the pattern
for i in range(rows):  # Outer loop iterates through rows
  print(" " * (rows - i - 1) + "*" * (2 * i + 1))  # Prints spaces and stars to create the pattern




my_list = [2, 24, 12, 354, 233]  # Initializes a list of numbers
for i in range(len(my_list) - 1):  # Outer loop iterates through the list (except the last element)
    minimum = i  # Assumes the current element is the minimum
    for j in range(i + 1, len(my_list)):  # Inner loop iterates through the remaining unsorted elements
        if(my_list[j] < my_list[minimum]):  # Checks if the current element is smaller than the assumed minimum
            minimum = j  # Updates the minimum index if a smaller element is found
            if(minimum != i):  # Checks if the minimum element is not the current element
                my_list[i], my_list[minimum] = my_list[minimum], my_list[i]  # Swaps the current element with the minimum element
print(my_list)  # Prints the sorted list
# The code performs Selection Sort algorithm to sort the given list in ascending order.