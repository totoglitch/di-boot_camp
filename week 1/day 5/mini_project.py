# -*- coding: utf-8 -*-
"""mini project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fySuRKBVAgEllCrAJoi8EkTi0959S9B-

Instructions
The game is played on a grid that’s 3 squares by 3 squares.
Players take turns putting their marks (O or X) in empty squares.
The first player to get 3 of their marks in a row (up, down, across, or diagonally) is the winner.
When all 9 squares are full, the game is over. If no player has 3 marks in a row, the game ends in a tie.


Hint
To do this project, you basically need to create four functions:

display_board() – To display the Tic Tac Toe board (GUI).
player_input(player) – To get the position from the player.
check_win() – To check whether there is a winner or not.
play() – The main function, which calls all the functions created above.
Note: The 4 functions above are just an example. You can implement many more helper functions or choose a completely different appoach if you want.



Tips : Consider the following:
What functionality will need to accur every turn to make this program work?
After contemplating the question above, think about splitting your code into smaller pieces (functions).
Remember to follow the single responsibility principle! each function should do one thing and do it well!
"""

def display_board(board):
  """Displays the Tic Tac Toe board."""
  print("-------------")
  for row in board:
    print("|", end="")
    for cell in row:
      print(" " + cell + " |", end="")
    print("\n-------------")


def player_input(player):
  """Gets the position from the player."""
  while True:
    try:
      position = int(input(f"Player {player}, choose a position (1-9): "))
      if 1 <= position <= 9:
        row = (position - 1) // 3
        col = (position - 1) % 3
        return row, col
      else:
        print("Invalid position. Please enter a number between 1 and 9.")
    except ValueError:
      print("Invalid input. Please enter a number.")


def check_win(board):
  """Checks whether there is a winner or not."""
  # Check rows
  for row in board:
    if row[0] == row[1] == row[2] and row[0] != " ":
      return row[0]

  # Check columns
  for col in range(3):
    if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
      return board[0][col]

  # Check diagonals
  if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
    return board[0][0]
  if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
    return board[0][2]

  return None


def is_board_full(board):
  """Checks if the board is full."""
  for row in board:
    for cell in row:
      if cell == " ":
        return False
  return True


def play():
  """The main function, which calls all the functions created above."""
  board = [[" " for _ in range(3)] for _ in range(3)]
  current_player = "X"

  while True:
    display_board(board)
    row, col = player_input(current_player)

    if board[row][col] == " ":
      board[row][col] = current_player
      winner = check_win(board)

      if winner:
        display_board(board)
        print(f"Player {winner} wins!")
        break
      elif is_board_full(board):
        display_board(board)
        print("It's a tie!")
        break
      else:
        current_player = "O" if current_player == "X" else "X"
    else:
      print("That position is already taken. Please choose another.")


if __name__ == "__main__":
  play()