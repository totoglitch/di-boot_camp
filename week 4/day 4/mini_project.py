# -*- coding: utf-8 -*-
"""mini project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rGzqcOvJnXSvUFtT0l8xSdYDILYdzE_V

Project Description
Using the AAPL (Apple Inc.) stock dataset, conduct the following analyses:



Initial Data Exploration
Load the dataset using Pandas. Check for null values and understand data types.
Examine the time series properties of the data (e.g., frequency, trends).


Data Visualization
Utilize Matplotlib to plot closing prices and traded volume over time.
Create a candlestick chart to depict high and low prices.


Statistical Analysis
Compute summary statistics (mean, median, standard deviation) for key columns.
Analyze closing prices with a moving average.


Hypothesis Testing
Execute a t-test to compare average closing prices across different years.
Examine daily returns’ distribution and test for normality using SciPy.


Advanced Statistical Techniques (Bonus)
Statistical Functions in NumPy: Employ NumPy’s statistical functions for in-depth stock data analysis.
E.g., Use convolve for moving averages, or np.corrcoef to explore correlations between financial metrics.
Analyze correlations between moving averages of closing prices and trading volume across time periods.


Resources
Dataset: download it here Apple Stock Prices From 1981 to 2023
It may include data such as date, opening price, closing price, high and low prices, and trading volume.

This information can be used to study trends and patterns in the stock market and make informed investment decisions.

Date: Represents the date of the stock price.
Open: Represents the opening stock price on that date.
High: Represents the highest stock price on that date.
Low: Represents the lowest stock price on that date.
Close: Represents the closing stock price on that date.
Adj close: Represents the adjusted closing stock price on that date (taking into account corporate actions such as splits).
Volume: Represents the number of shares traded on that date.


Project Submission
Submit a Jupyter Notebook with :

All analysis code and visualizations.
Detailed explanations of findings at each step.
A comprehensive summary of insights, focusing on advanced statistical analysis.
A ‘Reflection’ section detailing challenges and solutions.
Suggested structure:



1. Data Loading and Exploration
2. Data Visualization
3. Statistical Analysis
4. Hypothesis Testing
5. Advanced Statistical Techniques (Bonus)
    - Signal Processing using SciPy
    - Statistical Functions in NumPy
6. Summary and Insights
7. Reflection
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from scipy.signal import find_peaks
try:
    df = pd.read_csv('apple stock prices(1981to 2023).csv')
    print(df.head())
    print(df.info())
    print(df.describe())
    print("Null values:\n", df.isnull().sum())
except FileNotFoundError:
    print("Error: 'apple_stock_prices.csv' not found. Please upload the file.")
    exit()


# 2. Data Visualization

plt.figure(figsize=(12, 6))
plt.title('Apple Stock Closing Prices Over Time')
plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Volume'])
plt.title('Apple Stock Trading Volume Over Time')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.grid(True)
plt.show()


# 3. Statistical Analysis
print("Summary Statistics:\n", df[['Open', 'High', 'Low', 'Close', 'Volume']].describe())

# Calculate and plot moving averages
df['MA50'] = df['Close'].rolling(window=50).mean()
df['MA200'] = df['Close'].rolling(window=200).mean()

plt.figure(figsize=(12,6))
plt.plot(df['Date'], df['Close'], label='Close Price')
plt.plot(df['Date'], df['MA50'], label='50-Day MA')
plt.plot(df['Date'], df['MA200'], label='200-Day MA')
plt.legend()
plt.title('Moving Averages')
plt.show()


# 4. Hypothesis Testing (Example: t-test comparing closing prices of 2022 and 2023)

df['Year'] = pd.to_datetime(df['Date']).dt.year
group2022 = df[df['Year']==2022]['Close']
group2023 = df[df['Year']==2023]['Close']
t_statistic, p_value = stats.ttest_ind(group2022, group2023)

print(f"T-statistic: {t_statistic}, P-value: {p_value}")

#Normality Test
daily_returns = df['Close'].pct_change().dropna()
statistic, pvalue = stats.shapiro(daily_returns)
print(f"Shapiro-Wilk Test for Normality: Statistic = {statistic}, P-value = {pvalue}")



# 5. Advanced Statistical Techniques

# Signal Processing using SciPy: Example (Peak Detection)
peaks, _ = find_peaks(df['Close'], prominence=10)
plt.figure(figsize=(12, 6))
plt.plot(df['Date'], df['Close'])
plt.plot(df['Date'][peaks], df['Close'][peaks], "x")
plt.title('Peak Detection')
plt.show()

# Correlation between moving averages and volume
correlation = df['MA50'].corr(df['Volume'])
print(f"Correlation between 50-day MA and Volume: {correlation}")