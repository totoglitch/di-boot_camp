# -*- coding: utf-8 -*-
"""xp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZkyMpiFr2acI76o-dYbfYrEp71djsNLP

ðŸŒŸ Exercise 1: Basic Usage of SciPy
Task: Import the SciPy library and explore its version.
"""

import scipy
print(scipy.__version__)

"""ðŸŒŸ Exercise 2: Descriptive Statistics
Task: Given a sample dataset, calculate the mean, median, variance, and standard deviation using SciPy.
Sample Dataset:
data = [12, 15, 13, 12, 18, 20, 22, 21]
"""

import numpy as np
from scipy import stats
np.array([12, 15, 13, 12, 18, 20, 22, 21])
print(np.mean([12, 15, 13, 12, 18, 20, 22, 21]))
print(np.median([12, 15, 13, 12, 18, 20, 22, 21]))
print(np.var([12, 15, 13, 12, 18, 20, 22, 21]))
print(np.std([12, 15, 13, 12, 18, 20, 22, 21]))

"""Exercise 3: Understanding Distributions
Task: Generate a normal distribution using SciPy with a mean of 50 and a standard deviation of 10. Plot this distribution.
Code Example:
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# complete your code here

"""

import numpy as np
import matplotlib.pyplot as plt
mean = 50
std_dev = 10
data = np.random.normal(loc=mean, scale=std_dev, size=1000)

# Plot the distribution
plt.hist(data, bins=30)
plt.title('Normal Distribution')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

"""Exercise 4: T-Test Application
Task: Perform a T-test on two sets of randomly generated data.
Code Example:
data1 = np.random.normal(50, 10, 100)
data2 = np.random.normal(60, 10, 100)

# complete your code here

"""

import numpy as np
data1 = np.random.normal(50, 10, 100)
data2 = np.random.normal(60, 10, 100)

t_statistic, p_value = stats.ttest_ind(data1, data2)

print(f"T-statistic: {t_statistic}")
print(f"P-value: {p_value}")

""" Exercise 5: Linear Regression Analysis
Objective: Apply linear regression to a dataset and interpret the results.

Task: Given a dataset of housing prices (house_prices) and their corresponding sizes (house_sizes), use linear regression to predict the price of a house given its size.
Dataset:
house_sizes: [50, 70, 80, 100, 120] (in square meters)
house_prices: [150,000, 200,000, 210,000, 250,000, 280,000] (in currency units)
Questions:
What is the slope and intercept of the regression line?
Predict the price of a house that is 90 square meters.
Interpret the meaning of the slope in the context of housing prices.

"""

# prompt: linear regression

import numpy as np
from scipy import stats

# Dataset
house_sizes = np.array([50, 70, 80, 100, 120])
house_prices = np.array([150000, 200000, 210000, 250000, 280000])

# Calculate linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(house_sizes, house_prices)

print(f"Slope: {slope}")
print(f"Intercept: {intercept}")

# Predict the price of a 90 sq meter house
predicted_price = slope * 90 + intercept
print(f"Predicted price for a 90 sq meter house: {predicted_price}")

# Interpretation of the slope
print("Interpretation of the slope:")
print(f"For every 1 square meter increase in house size, the price is expected to increase by {slope} units.")

"""Exercise 6: Understanding ANOVA
Objective: Test understanding of ANOVA and its application.

Task: Three different fertilizers are applied to three separate groups of plants to test their effectiveness. The growth in centimeters is recorded.
Dataset:
fertilizer_1: [5, 6, 7, 6, 5]
fertilizer_2: [7, 8, 7, 9, 8]
fertilizer_3: [4, 5, 4, 3, 4]
Questions:
Perform an ANOVA test on the given data. What are the F-value and P-value?
Based on the P-value, do the fertilizers have significantly different effects on plant growth?
Explain what would happen if the P-value were greater than 0.05.

"""

# prompt: understanding anova

# Dataset
fertilizer_1 = [5, 6, 7, 6, 5]
fertilizer_2 = [7, 8, 7, 9, 8]
fertilizer_3 = [4, 5, 4, 3, 4]

# Perform ANOVA test
f_value, p_value = stats.f_oneway(fertilizer_1, fertilizer_2, fertilizer_3)

print(f"F-value: {f_value}")
print(f"P-value: {p_value}")

# Interpretation
alpha = 0.05  # Significance level

if p_value < alpha:
    print("The fertilizers have significantly different effects on plant growth.")
else:
    print("There is no significant difference in the effects of the fertilizers on plant growth.")

print("If the p-value were greater than 0.05, we would fail to reject the null hypothesis. This would mean that there is not enough evidence to conclude that the different fertilizers have significantly different effects on plant growth.  We would conclude that the means of the three groups are likely the same.")

""" Exercise 7: Probability Distributions (Optional)
Work with a binomial distribution: calculate probabilities for different numbers of successes.
Example: Calculating the probability of getting exactly 5 heads in 10 coin flips.

"""

from scipy.stats import binom

# Number of trials (coin flips)
n = 10

# Number of successes (heads)
k = 5

p = 0.5

# Calculate the probability using the binomial distribution
probability = binom.pmf(k, n, p)

print(f"The probability of getting exactly 5 heads in 10 coin flips is: {probability}")

"""
ðŸŒŸ Exercise 8: Correlation Coefficients (Optional)
Calculate the Pearson and Spearman correlation coefficients between two variables in a dataset.
Example in code: data = pd.DataFrame({'age': [23, 25, 30, 35, 40], 'income': [35000, 40000, 50000, 60000, 70000]})
"""

import pandas as pd

# Sample data (replace with your actual data)
data = pd.DataFrame({'age': [23, 25, 30, 35, 40], 'income': [35000, 40000, 50000, 60000, 70000]})

# Calculate Pearson correlation
pearson_corr = data['age'].corr(data['income'], method='pearson')
print(f"Pearson correlation: {pearson_corr}")

# Calculate Spearman correlation
spearman_corr = data['age'].corr(data['income'], method='spearman')
print(f"Spearman correlation: {spearman_corr}")