# -*- coding: utf-8 -*-
"""xp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XztfpmOg8MlU48IE8GivV1pNyK1P-7p1

Exercise 1 : Matrix Operations
Instructions
In this exercise, youâ€™ll work with a 3x3 matrix. Hereâ€™s a brief explanation of the concepts:

Determinant: The determinant is a value that can be computed from the elements of a square matrix. It provides important information about the matrix, such as whether it has an inverse, and is used in various areas like linear algebra and calculus. To understand more about it you can watch this video.
Inverse of a Matrix: The inverse of a matrix is a matrix that, when multiplied with the original matrix, results in an identity matrix. Not all matrices have inverses. The inverse is crucial in solving systems of linear equations.
Create a 3x3 matrix and perform the following operations:

Calculate the determinant.
Find the inverse of the matrix.
"""

import numpy as np

def matrix_operations():
    # Create a 3x3 matrix (example)
    matrix = np.array([[1, 2, 3],
                       [4, 5, 6],
                       [7, 8, 9]])

    # Calculate the determinant
    determinant = np.linalg.det(matrix)
    print("Determinant:", determinant)

    # Find the inverse of the matrix
    try:
        inverse_matrix = np.linalg.inv(matrix)
        print("Inverse Matrix:\n", inverse_matrix)
    except np.linalg.LinAlgError:
        print("Matrix is singular, it does not have an inverse.")


matrix_operations()

"""Exercise 2 : Statistical Analysis
Instructions
In this exercise, youâ€™ll calculate statistical measures for a dataset:

Mean: The average value of a dataset.
Median: The middle value in a dataset when it is arranged in ascending or descending order.
Standard Deviation: A measure of the amount of variation or dispersion in a set of values.
Using NumPy, generate an array of 50 random numbers and compute:

The mean and median.
The standard deviation.



"""

import numpy as np

def statistical_analysis():
    # Generate an array of 50 random numbers
    random_numbers = np.random.rand(50)

    mean = np.mean(random_numbers)
    median = np.median(random_numbers)

    # Calculate the standard deviation
    std_dev = np.std(random_numbers)

    print("Mean:", mean)
    print("Median:", median)
    print("Standard Deviation:", std_dev)

statistical_analysis()

"""
ðŸŒŸ Exercise 3 : Date Manipulation
Instructions
Create a NumPy array of dates for the month of January 2023. Convert these dates to another format (e.g., YYYY/MM/DD).



"""

import numpy as np

def date_manipulation():

    dates = np.arange('2023-01-01', '2023-02-01', dtype='datetime64[D]')

    formatted_dates = [str(date).replace('-', '/') for date in dates]

    print("Dates in YYYY/MM/DD format:")
    for date in formatted_dates:
        print(date)

date_manipulation()

""" Exercise 4 : Data Manipulation with NumPy and Pandas
Instructions
Create a DataFrame with random numbers and perform:

Conditional selection of data.
Aggregation functions like sum and average.



"""

import pandas as pd
import numpy as np

def data_manipulation():
    # Create a DataFrame with random numbers
    data = {'col1': np.random.rand(10),
            'col2': np.random.rand(10),
            'col3': np.random.rand(10)}
    df = pd.DataFrame(data)

    # Conditional selection (e.g., select rows where col1 > 0.5)
    selected_rows = df[df['col1'] > 0.5]
    print("Selected rows:\n", selected_rows)

    # Aggregation functions
    col1_sum = df['col1'].sum()
    col2_average = df['col2'].mean()

    print("\nSum of col1:", col1_sum)
    print("Average of col2:", col2_average)

data_manipulation()

""" Exercise 5 : Image Representation
Instructions
Explain how images are represented in NumPy arrays and demonstrate with a simple example (e.g., creating a 5x5 grayscale image).


"""

import numpy as np
def image_representation():
    # Images are represented as multi-dimensional NumPy arrays.
    # Grayscale images are 2D arrays, where each element represents the intensity of a pixel.
    # Color images are 3D arrays, with the third dimension representing the color channels (e.g., Red, Green, Blue).

    # Create a 5x5 grayscale image (example)
    grayscale_image = np.zeros((5, 5), dtype=np.uint8)  # Initialize a 5x5 array of zeros
    grayscale_image[0:2, 0:2] = 255 #make top-left corner white

    print("Grayscale Image:\n", grayscale_image)

    # Display the image using matplotlib (optional)
    import matplotlib.pyplot as plt
    plt.imshow(grayscale_image, cmap='gray')
    plt.title("5x5 Grayscale Image")
    plt.show()

image_representation()

""" Exercise 6 : Basic Hypothesis Testing
Instructions
Create a sample dataset to test the effectiveness of a new training program on employee productivity:


import numpy as np

# Productivity scores of employees before the training program
productivity_before = np.random.normal(loc=50, scale=10, size=30)

# Productivity scores of the same employees after the training program
productivity_after = productivity_before + np.random.normal(loc=5, scale=3, size=30)

# Your task is to formulate a hypothesis regarding the training program's effectiveness
# and test it using basic statistical functions in NumPy.


Given a dataset, formulate a simple hypothesis and test it using basic statistical functions in NumPy.


"""

# prompt: create a sample dataset to test the effectivnes of a new training program

import numpy as np

def hypothesis_testing():
    # Productivity scores of employees before the training program
    productivity_before = np.random.normal(loc=50, scale=10, size=30)

    # Productivity scores of the same employees after the training program
    # Simulate a positive effect of the training program
    productivity_after = productivity_before + np.random.normal(loc=5, scale=3, size=30)

    # Calculate the difference in productivity scores
    difference = productivity_after - productivity_before

    # Calculate the mean difference
    mean_difference = np.mean(difference)

    print("Mean difference in productivity scores:", mean_difference)

    # Test the hypothesis:
    # Null hypothesis (H0): The training program has no effect on productivity (mean_difference = 0).
    # Alternative hypothesis (H1): The training program has a positive effect on productivity (mean_difference > 0).

    # A simple test (not statistically rigorous): Check if mean difference is significantly greater than zero
    if mean_difference > 2: # Arbitrary threshold, needs proper statistical testing (e.g., t-test)
        print("The training program seems to have a positive effect on productivity.")
    else:
        print("The training program's effect on productivity is not clear.")

hypothesis_testing()

"""
ðŸŒŸ Exercise 7 : Complex Array Comparison
Instructions
Create two arrays and perform element-wise comparison to find which elements are greater in the first array.

The expected output is a boolean array showing which elements in the first array are greater than the corresponding elements in the second array.

"""

# prompt: make two arrays and preform wise comparison to find which elements are greater in the first array

import numpy as np

def complex_array_comparison():
    # Create two sample arrays
    array1 = np.array([1, 5, 2, 8, 3])
    array2 = np.array([4, 2, 7, 1, 9])

    # Perform element-wise comparison
    comparison_result = array1 > array2

    print("Comparison Result:", comparison_result)

complex_array_comparison()

""" Exercise 8 : Time Series Data Manipulation
Instructions
Generate time series data for the year 2023. Demonstrate slicing for the following intervals:

January to March
April to June
July to September
October to December
Generate a time series data for a specific period and demonstrate how to slice this data for different intervals.


"""

# prompt: time series data manipulation

import pandas as pd
import numpy as np
def time_series_manipulation():
    # Generate time series data for 2023
    date_rng = pd.date_range(start='1/1/2023', end='12/31/2023', freq='D')
    df = pd.DataFrame(date_rng, columns=['date'])
    df['data'] = np.random.randint(0, 100, size=(len(date_rng))) # Example data
    df = df.set_index('date')

    # Slicing for different intervals
    print("January to March:")
    print(df['2023-01-01':'2023-03-31'])

    print("\nApril to June:")
    print(df['2023-04-01':'2023-06-30'])

    print("\nJuly to September:")
    print(df['2023-07-01':'2023-09-30'])

    print("\nOctober to December:")
    print(df['2023-10-01':'2023-12-31'])
time_series_manipulation()

"""Exercise 9 : Data Conversion
Instructions
Demonstrate how to convert a NumPy array to a Pandas DataFrame and vice versa.




"""

import numpy as np
import pandas as pd

def data_conversion():
    # NumPy array to Pandas DataFrame
    numpy_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    df = pd.DataFrame(numpy_array, columns=['A', 'B', 'C'])
    print("NumPy array to DataFrame:\n", df)

    # Pandas DataFrame to NumPy array
    numpy_array_from_df = df.to_numpy()
    print("\nDataFrame to NumPy array:\n", numpy_array_from_df)

data_conversion()

""" Exercise 10 : Basic Visualization
Instructions
Use Matplotlib to visualize a simple dataset created with NumPy (e.g., a line graph of random numbers).


"""

# prompt: basic visualization

import matplotlib.pyplot as plt
import numpy as np

def basic_visualization():
    # Generate some sample data
    x = np.linspace(0, 10, 100)  # 100 evenly spaced points between 0 and 10
    y = np.sin(x)  # Calculate the sine of each x-value

    # Create the plot
    plt.plot(x, y)

    # Customize the plot (optional)
    plt.title("Sine Wave")
    plt.xlabel("X-axis")
    plt.ylabel("Y-axis")
    plt.grid(True)

    # Show the plot
    plt.show()

basic_visualization()