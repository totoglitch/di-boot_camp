# -*- coding: utf-8 -*-
"""daily challenge

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0-qaOFMS1UfUazq9AYv5myey7sVMesO

Instructions :
The goal of the exercise is to create a class that will help you analyze a specific text. A text can be just a simple string, like “Today, is a happy day” or it can be an external text file.



Part I
First, we will analyze a simple string, like “A good book would sometimes cost as much as a good house.”

Create a class called Text that takes a string as an argument and store the text in a attribute.
Hint: You need to manually copy-paste the text, straight into the code

Implement the following methods:
a method to return the frequency of a word in the text (assume words are separated by whitespace) return None or a meaningful message.
a method that returns the most common word in the text.
a method that returns a list of all the unique words in the text.


Part II
Then, we will analyze a text coming from an external text file. Download the_stranger.txt file.

Implement a classmethod that returns a Text instance but with a text file:

    >>> Text.from_file('the_stranger.txt')
Hint: You need to open and read the text from the text file.


Now, use the provided the_stranger.txt file and try using the class you created above.



Bonus:
Create a class called TextModification that inherits from Text.

Implement the following methods:
a method that returns the text without any punctuation.
a method that returns the text without any english stop-words (check out what this is !!).
a method that returns the text without any special characters.
Note: Instead of creating a child class, you could also implements those methods as static methods in the Text class.

Note: Feel free to implement/create any attribute, method or function needed to make this work, be creative :)
"""

# prompt: create a class that help me to analyze a spesifc text

import re
from collections import Counter

class Text:
    def __init__(self, text):
        self.text = text

    def word_frequency(self, word):
        words = self.text.lower().split()
        if word.lower() in words:
            return words.count(word.lower())
        else:
            return "Word not found in the text."

    def most_common_word(self):
        words = self.text.lower().split()
        word_counts = Counter(words)
        return word_counts.most_common(1)[0][0] if word_counts else None

    def unique_words(self):
        words = self.text.lower().split()
        return list(set(words))

    @classmethod
    def from_file(cls, filename):
        with open(filename, 'r') as f:
            text = f.read()
        return cls(text)


class TextModification(Text):
    def remove_punctuation(self):
        return re.sub(r'[^\w\s]', '', self.text)

    def remove_stopwords(self):
        stop_words = ['the', 'a', 'an', 'in', 'on', 'at', 'to', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'can', 'could', 'will', 'would', 'should', 'may', 'might', 'must', 'i', 'you', 'he', 'she', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them', 'my', 'your', 'his', 'her', 'our', 'their']
        words = [word for word in self.text.lower().split() if word not in stop_words]
        return ' '.join(words)

    def remove_special_characters(self):
        return re.sub(r'[^a-zA-Z0-9\s]', '', self.text)