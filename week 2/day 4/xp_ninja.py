# -*- coding: utf-8 -*-
"""xp ninja

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16gaE-gVIMdRYn4XP9X0dNsX1sLHWJ7NJ

Exercise 1 : Restaurant Menu Manager - Regular Expressions
Instructions
Goal: The Manager wants to have a special Valentine’s night, but there are some rules.



Create a new list of special Valentine’s day items inside the json file. For now the list should be empty.

Ask to the manager for a new Valentine item to add, if the item is correct (ie. follows the rules below), then add it to the list inside the json file.
Each word in the item name should begin with an uppercase letter and because it’s Valentines Day, the first word needs to begin with a capital “V”.

If the name contains connection words, they should begin in lowercase.
Example: Vegetable Soup of Valentines-day

The name of the meal needs to contain at least two “e”, and no numbers.

The price needs to match the following pattern: XX,14, where X are numbers.

Create an algorithm that displays a heart made of stars (*), when the menu is showed.
"""

import json
import re

def validate_item_name(item_name):
  """Validates the item name based on the given rules."""

  # Check if the first word starts with 'V' and all words start with uppercase
  words = item_name.split()
  if not words or not words[0].startswith('V') or not all(word[0].isupper() for word in words):
      return False

  # Check for lowercase connection words
  for i in range(1,len(words) - 1):
      if words[i].lower() != words[i] and words[i] not in ['of', 'and', 'with', 'or']:
          return False

  # Check for at least two 'e's and no numbers
  if item_name.count('e') < 2 or any(char.isdigit() for char in item_name):
      return False

  return True

def validate_price(price):
  """Validates the price format (XX,14)."""
  pattern = r"^\d{2},14$"  # Matches two digits, a comma, and 14.
  return bool(re.match(pattern, price))


def display_heart():
    """Displays a heart made of stars."""
    print("  ***  ")
    print(" *   * ")
    print("*     *")
    print(" *   * ")
    print("  ***  ")


def manage_menu(filename="menu.json"):
    """Manages the restaurant menu."""

    try:
        with open(filename, 'r+') as f:
            try:
              menu = json.load(f)
            except json.JSONDecodeError:
                menu = {"valentines_items": []} # initialize the json

            while True:
                display_heart()
                print("\nValentine's Day Menu Manager")
                print("1. Add a new Valentine's item")
                print("2. View the menu")
                print("3. Exit")
                choice = input("Enter your choice: ")

                if choice == '1':
                    item_name = input("Enter the item name: ")
                    if validate_item_name(item_name):
                      price = input("Enter the price (XX,14): ")
                      if validate_price(price):
                          menu["valentines_items"].append({"name": item_name, "price": price})
                          f.seek(0) # go to the beginning of the file before writing
                          json.dump(menu, f, indent=4)
                          f.truncate()
                          print("Item added successfully!")
                      else:
                        print("Invalid price format.")
                    else:
                      print("Invalid item name. Please follow the rules.")

                elif choice == '2':
                    if not menu["valentines_items"]:
                        print("No Valentine's Day items yet.")
                    else:
                        for i, item in enumerate(menu["valentines_items"]):
                            print(f"{i + 1}. {item['name']} - {item['price']}")

                elif choice == '3':
                    break
                else:
                    print("Invalid choice. Please try again.")

    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")

if __name__ == "__main__":
    manage_menu()

"""Instructions
For a game of Dungeons & Dragons, each player starts by generating a character they can play with. This character has, among other things, six attributes/stats:
Strength
Dexterity
Constitution
Intelligence
Wisdom
Charisma

These six abilities have scores that are determined randomly. You do this by rolling four 6-sided dice and record the sum of the largest three dice. You do this six times, once for each ability.
For example, the six throws of four dice may look like:
5, 3, 1, 6: You discard the 1 and sum 5 + 3 + 6 = 14, which you assign to strength.
3, 2, 5, 3: You discard the 2 and sum 3 + 5 + 3 = 11, which you assign to dexterity.
1, 1, 1, 1: You discard the 1 and sum 1 + 1 + 1 = 3, which you assign to constitution.
2, 1, 6, 6: You discard the 1 and sum 2 + 6 + 6 = 14, which you assign to intelligence.
3, 5, 3, 4: You discard the 3 and sum 5 + 3 + 4 = 12, which you assign to wisdom.
6, 6, 6, 6: You discard the 6 and sum 6 + 6 + 6 = 18, which you assign to charisma.

Create a class called Character and a class called Game for this exercise.

The point of this exercise is to generate characters for players looking to start a game quickly.
Start by asking the user how many players are playing.
Each user then creates his/her character, let them establish what the characters name and age are.
Output the characters created into the following formats:
txt: a nicely formatted text file for the players to use
json: a json file of all the characters and attributes


Hint: the Character class should be in charge of creating characters, the Game class should be in charge of how many times the Character gets instantiated and of exporting the data in json or txt



"""

import json
import random

class Character:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.attributes = {}
        self.generate_attributes()

    def generate_attributes(self):
        attributes = ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"]
        for attribute in attributes:
            self.attributes[attribute] = self.roll_dice()

    def roll_dice(self):
        rolls = [random.randint(1, 6) for _ in range(4)]
        rolls.sort(reverse=True)
        return sum(rolls[:3])

    def to_dict(self):
        return {
            "name": self.name,
            "age": self.age,
            "attributes": self.attributes
        }


class Game:
    def __init__(self, num_players):
        self.num_players = num_players
        self.characters = []

    def create_characters(self):
        for _ in range(self.num_players):
            name = input("Enter character name: ")
            age = int(input("Enter character age: "))
            self.characters.append(Character(name, age))

    def export_to_txt(self, filename="characters.txt"):
        with open(filename, "w") as f:
            for char in self.characters:
                f.write(f"Name: {char.name}, Age: {char.age}\n")
                for attr, value in char.attributes.items():
                    f.write(f"  {attr}: {value}\n")
                f.write("-" * 20 + "\n")

    def export_to_json(self, filename="characters.json"):
        data = [char.to_dict() for char in self.characters]
        with open(filename, "w") as f:
            json.dump(data, f, indent=4)


if __name__ == "__main__":
    num_players = int(input("Enter the number of players: "))
    game = Game(num_players)
    game.create_characters()
    game.export_to_txt()
    game.export_to_json()