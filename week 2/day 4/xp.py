# -*- coding: utf-8 -*-
"""xp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0-qaOFMS1UfUazq9AYv5myey7sVMesO

Exercise 1 – Random Sentence Generator
Instructions
Description: In this exercise we will create a random sentence generator. We will do this by asking the user how long the sentence should be and then printing the generated sentence.

Hint : The generated sentences do not have to make sense.

Download this word list

Save it in your development directory.

Create a function called get_words_from_file. This function should read the file’s content and return the words as a collection. What is the correct data type to store the words?

Create another function called get_random_sentence which takes a single parameter called length. The length parameter will be used to determine how many words the sentence should have. The function should:
use the words list to get your random words.
the amount of words should be the value of the length parameter.

Take the random words and create a sentence (using a python method), the sentence should be lower case.

Create a function called main which will:

Print a message explaining what the program does.

Ask the user how long they want the sentence to be. Acceptable values are: an integer between 2 and 20. Validate your data and test your validation!
If the user inputs incorrect data, print an error message and end the program.
If the user inputs correct data, run your code.
"""

def get_words_from_file(file_path):
  """Reads a file and returns a list of words."""
  with open(file_path, 'r') as file:
    words = file.read().splitlines()
  return words
def get_random_sentence(length, words_list):
  """Generates a random sentence with a given length."""
  import random
  random_words = random.sample(words_list, length)
  sentence = " ".join(random_words).lower()
  return sentence.capitalize() + "."


def main():
  """Main function for the random sentence generator."""
  print("This program generates a random sentence of a given length.")

  try:
    sentence_length = int(input("How long do you want the sentence to be (between 2 and 20 words)? "))
    if not 2 <= sentence_length <= 20:
      print("Error: Sentence length must be between 2 and 20.")
      return

  except ValueError:
    print("Error: Invalid input. Please enter an integer.")
    return


  # Replace 'path/to/your/wordlist.txt' with the actual path to your word list file
  words = get_words_from_file('http://norvig.com/ngrams/sowpods.txt')
  random_sentence = get_random_sentence(sentence_length, words)
  print(random_sentence)

if __name__ == "__main__":
  main()

""" Exercise 2: Working with JSON
Instructions
import json
sampleJson = '''{
   "company":{
      "employee":{
         "name":"emma",
         "payable":{
            "salary":7000,
            "bonus":800
         }
      }
   }
}'''


Access the nested “salary” key from the JSON-string above.
Add a key called “birth_date” to the JSON-string at the same level as the “name” key.
Save the dictionary as JSON to a file.
"""

# prompt: working with json import json samplejson

import json
import random

sampleJson = """{
   "company":{
      "employee":{
         "name":"emma",
         "payable":{
            "salary":7000,
            "bonus":800
         }
      }
   }
}"""

# Access the nested "salary" key from the JSON-string
data = json.loads(sampleJson)
salary = data['company']['employee']['payable']['salary']
print("Salary:", salary)

# Add a key called "birth_date" to the JSON-string at the same level as the "name" key
data['company']['employee']['birth_date'] = "1990-01-01"  # Replace with actual birth date

# Save the dictionary as JSON to a file
with open('updated_employee.json', 'w') as f:
  json.dump(data, f, indent=4)