# -*- coding: utf-8 -*-
"""xp gold

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PJktoWCggpynoVIuojeJmhYBXzHRiP6v

Exercise 1 : Upcoming Holiday
Instructions
Write a function that displays today’s date.
The function should also display the amount of time left from now until the next upcoming holiday and print which holiday that is. (Example: the next holiday is New Years’ Eve in 30 days).
Hint: Use a module to find the datetime and name of the upcoming holiday.
"""

import datetime
import holidays

def upcoming_holiday():
    """Displays today's date and the time until the next upcoming holiday."""

    today = datetime.date.today()
    print(f"Today's date: {today}")

    us_holidays = holidays.US()

    # Find the next holiday
    next_holiday = None
    time_until_next_holiday = None

    for date, name in sorted(us_holidays.items()):
        if date > today:
            next_holiday = name
            time_until_next_holiday = date - today
            break

    if next_holiday:
        print(f"The next holiday is {next_holiday} in {time_until_next_holiday.days} days.")
    else:
        print("No upcoming holidays found in the current year.")

upcoming_holiday()

"""Exercise 2 : How Old Are You On Jupiter?
Instructions
Given an age in seconds, calculate how old someone would be on all those planets :

Earth: orbital period 365.25 Earth days, or 31557600 seconds
Example : if someone is 1,000,000,000 seconds old, the function should output that they are 31.69 Earth-years old.
Mercury: orbital period 0.2408467 Earth years
Venus: orbital period 0.61519726 Earth years
Mars: orbital period 1.8808158 Earth years
Jupiter: orbital period 11.862615 Earth years
Saturn: orbital period 29.447498 Earth years
Uranus: orbital period 84.016846 Earth years
Neptune: orbital period 164.79132 Earth years

"""

import datetime

def age_on_jupiter(age_in_seconds):
    """Calculates age on Jupiter based on age in seconds."""

    earth_year_seconds = 31557600
    earth_years = age_in_seconds / earth_year_seconds
    jupiter_orbital_period = 11.862615

    jupiter_age = earth_years / jupiter_orbital_period

    return jupiter_age

age_seconds = 1000000000  # Example age in seconds
jupiter_years = age_on_jupiter(age_seconds)
print(f"If you are {age_seconds} seconds old, you are {jupiter_years:.2f} Jupiter-years old.")

"""Exercise 3 : Regular Expression #1
Instructions
Hint: Use the RegEx (module)

Use the regular expression module to extract numbers from a string.

Example

return_numbers('k5k3q2g5z6x9bn')
// Excepted output : 532569

"""

import re

def return_numbers(input_string):
    """Extracts numbers from a string using regular expressions."""
    numbers = re.findall(r'\d', input_string)
    return int("".join(numbers))

# Example usage
result = return_numbers('k5k3q2g5z6x9bn')
print(result)

"""Exercise 4 : Regular Expression #2
Instructions
Hint: Use the RegEx (module)

Ask the user for their full name (example: “John Doe”), and check the validity of their answer:
The name should contain only letters.
The name should contain only one space.
The first letter of each name should be upper cased.

"""

import re

def validate_name(name):
    """
    Checks the validity of a full name using regular expressions.
    """
    pattern = r'^[A-Z][a-z]+ [A-Z][a-z]+$'
    match = re.match(pattern, name)
    if match:
        return True
    else:
        return False

user_name = input("Enter your full name (e.g., 'John Doe'): ")

if validate_name(user_name):
    print("Valid name.")
else:
    print("Invalid name. Please follow the specified format.")

"""Exercise 5: Python Password Generator
Instructions
Create a Python program that will generate a good password for you.

Program flow:

Ask the user to type in the number of characters that the password should have (password length) – between 6 and 30 characters.
Validate the input. Make sure the user is inputing a number between 6 to 30. Create a loop which will continue to ask the user for an input until they enter a valid one.

Generate a password with the required length.

Print the password with a user-friendly message which reminds the user to keep the password in a safe place!

Rules for the validity of the password

Each password should contain:
At least 1 digit (0-9)
At least 1 lower-case character (a-z)
At least 1 upper-case character (A-Z)
At least 1 special character (eg. !, @, #, $, %, ^, _, …)
Once there is at least 1 of each, the rest of the password should be composed of more characters from the options presented above.

Create a test function first!

Do the following steps 100 times, with different password lengths:
Generate a password.
Test the password to ensure that:
it fulfills all the requirements above (eg. it has at least one digit, etc.)
it ha
"""

import random
import re

def generate_password(length):
    """Generates a password of the specified length."""

    if not 6 <= length <= 30:
        raise ValueError("Password length must be between 6 and 30 characters.")

    characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
    password = ""
    password += random.choice("abcdefghijklmnopqrstuvwxyz")
    password += random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
    password += random.choice("0123456789")
    password += random.choice("!@#$%^&*()")

    for _ in range(length - 4):
      password += random.choice(characters)

    password_list = list(password)
    random.shuffle(password_list)
    password = "".join(password_list)

    return password

def validate_password(password):
    """Validates a password based on specified rules."""
    if len(password) < 6 or len(password) > 30 :
        return False
    if not re.search(r'[a-z]', password):
        return False
    if not re.search(r'[A-Z]', password):
        return False
    if not re.search(r'[0-9]', password):
        return False
    if not re.search(r'[!@#$%^&*()]', password):
        return False
    return True

def main():
    while True:
        try:
            password_length = int(input("Enter the desired password length (6-30): "))
            if 6 <= password_length <= 30:
                break
            else:
                print("Invalid input. Please enter a number between 6 and 30.")
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

    password = generate_password(password_length)

    print(f"Your generated password is: {password}")
    print("Please keep your password in a safe place!")

if __name__ == "__main__":
    main()