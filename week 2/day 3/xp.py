# -*- coding: utf-8 -*-
"""xp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GDBnEZWDnLgxF0jqxKo_tJAaqIVw3Qjj

Exercise 1: Currencies
Instructions
class Currency:
    def __init__(self, currency, amount):
        self.currency = currency
        self.amount = amount

    #Your code starts HERE


Using the code above, implement the relevant methods and dunder methods which will output the results below.
Hint : When adding 2 currencies which donâ€™t share the same label you should raise an error.
>>> c1 = Currency('dollar', 5)
>>> c2 = Currency('dollar', 10)
>>> c3 = Currency('shekel', 1)
>>> c4 = Currency('shekel', 10)

>>> str(c1)
'5 dollars'

>>> int(c1)
5

>>> repr(c1)
'5 dollars'

>>> c1 + 5
10

>>> c1 + c2
15

>>> c1
5 dollars

>>> c1 += 5
>>> c1
10 dollars

>>> c1 += c2
>>> c1
20 dollars

>>> c1 + c3
TypeError: Cannot add between Currency type <dollar> and <shekel>
"""

class currincy:
    def __init__(self, currency, amount):
        self.currency = currency
        self.amount = amount

c1 = currincy('dollar', 5)
c2 = currincy('dollar', 10)
c3 = currincy('shekel', 1)
c4 = currincy('shekel', 10)
str(c1)
int(c1)
repr(c1)
    c1 = Currency('dollar', 5)
    c2 = Currency('dollar', 10)
    c3 = Currency('shekel', 1)
    c4 = Currency('shekel', 10)
    str(c1)
    int(c1)
    repr(c1)
    c1 + 5
    c1 + c2
    c1
    c1 += 5
    c1
    c1 += c2
    c1

""" Exercise 2: Import
Instructions
In a file named func.py create a function that sum 2 numbers, and prints the result
In a file named exercise_one.py import the function and call it to print the result
Hint: You can use the the following syntaxes:

import module_name

OR

from module_name import function_name

OR

from module_name import function_name as fn

OR

import module_name as mn

"""

def sum_numbers(a, b):
  """Sums two numbers and prints the result."""
  result = a + b
result

""" Exercise 3: String module
Instructions
Generate random String of length 5
Note: String must be the combination of the UPPER case and lower case letters only. No numbers and a special symbol.
Hint: use the string module

"""

# prompt: using a string module generate a random string of length 5 note

import string
import random

def generate_random_string(length):
    letters = string.ascii_letters  # Includes both uppercase and lowercase letters
    return ''.join(random.choice(letters) for i in range(length))

random_string = generate_random_string(5)
random_string

"""
ðŸŒŸ Exercise 4 : Current Date
Instructions
Create a function that displays the current date.
Hint : Use the datetime module.
"""

import datetime

def current_date():
    today = datetime.date.today()
    return today

current_date()

"""
Exercise 5 : Amount of time left until January 1st
Instructions
Create a function that displays the amount of time left from now until January 1st.
(Example: the 1st of January is in 10 days and 10:34:01hours).
"""

import datetime

def time_left_until_january_1st():
    target_date = datetime.datetime(2026, 1, 1)
    current_datetime = datetime.datetime.now()
    time_difference = target_date - current_datetime
    return
    time_difference

time_left_until_january_1st()
print(f"The 1st of January is in {time_difference.days} days and {time_difference.seconds // 3600} hours.")

"""
Exercise 6 : Birthday and minutes
Instructions
Create a function that accepts a birthdate as an argument (in the format of your choice), then displays a message stating how many minutes the user lived in his life.
"""

import datetime

def minutes_lived(birthdate_str):
    try:
        birthdate = datetime.datetime.strptime(birthdate_str, "%Y-%m-%d")
        now = datetime.datetime.now()
        time_difference = now - birthdate
        minutes_alive = time_difference.total_seconds() / 60
        print(f"You have lived for approximately {minutes_alive:.0f} minutes.")
    except ValueError:
        print("Invalid date format. Please use YYYY-MM-DD.")

"""Exercise 7 : Faker Module
Instructions
Install the faker module, and take a look at the documentation and learn how to properly implement faker in your code.
Create an empty list called users. Tip: It should be a list of dictionaries.
Create a function that adds new dictionaries to the users list. Each user has the following keys: name, adress, langage_code. Use faker to populate them with fake data.

"""

!pip install faker

from faker import Faker
import random

fake = Faker()
users = []

def add_user(users_list):
    new_user = {
        'name': fake.name(),
        'address': fake.address(),
        'language_code': fake.language_code()
    }
    users_list.append(new_user)

# Example usage
add_user(users)
add_user(users)
users