# -*- coding: utf-8 -*-
"""daily challenge

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0-qaOFMS1UfUazq9AYv5myey7sVMesO

Instructions
Part 1 : Quizz :
Answer the following questions

What is a class?
What is an instance?
What is encapsulation?
What is abstraction?
What is inheritance?
What is multiple inheritance?
What is polymorphism?
What is method resolution order or MRO?
"""

# What is a class?
# A class is a blueprint or template for creating objects (instances).
# It defines the attributes (data) and methods (functions) that an object of that class will have.

# What is an instance?
# An instance (or object) is a specific realization of a class.
# It's a concrete example of the blueprint defined by the class.
# Each instance has its own unique data, but shares the same methods defined by the class.

# What is encapsulation?
# Encapsulation is the bundling of data (attributes) and methods (functions) that operate on that data within a class.
# It restricts direct access to some of an object's components,
# which helps to protect data integrity and maintain the consistency of the object's state.

# What is abstraction?
# Abstraction is the process of simplifying complex systems by focusing on essential features and hiding unnecessary details.
# In OOP, it allows you to define interfaces and abstract classes that hide the internal implementation of methods.
# Users only interact with the defined interface without needing to know the underlying mechanisms.

# What is inheritance?
# Inheritance is a mechanism that allows a class (subclass or derived class) to inherit attributes and methods from another class (superclass or base class).
# This promotes code reusability and establishes relationships between classes.

# What is multiple inheritance?
# Multiple inheritance is a feature in some object-oriented programming languages that allows a class to inherit from multiple parent classes.
# This can enable a class to combine functionalities from different sources, but it can also lead to complexities, such as the "diamond problem" where ambiguity arises if multiple parent classes have the same method.

# What is polymorphism?
# Polymorphism means "many forms". It allows objects of different classes to be treated as objects of a common type.
# This means that you can use a single interface to represent different types of objects, making your code more flexible and adaptable.

# What is method resolution order or MRO?
# MRO defines the order in which Python searches for methods in a class hierarchy.
# It's crucial for multiple inheritance to determine which method will be executed when a method is called on an object, especially when there are method name conflicts between parent classes.

"""
Part 2: Create a deck of cards class.
The Deck of cards class should NOT inherit from a Card class.

The requirements are as follows:

The Card class should have a suit (Hearts, Diamonds, Clubs, Spades) and a value (A,2,3,4,5,6,7,8,9,10,J,Q,K)
The Deck class :
should have a shuffle method which makes sure the deck of cards has all 52 cards and then rearranges them randomly.
should have a method called deal which deals a single card from the deck. After a card is dealt, it should be removed from the deck.
"""

# prompt: create a deck of cards

import random

class Deck:
    def __init__(self):
        self.suits = ["Hearts", "Diamonds", "Clubs", "Spades"]
        self.values = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
        self.cards = []
        self.create_deck()

    def create_deck(self):
        for suit in self.suits:
            for value in self.values:
                self.cards.append((suit, value))

    def shuffle(self):
        random.shuffle(self.cards)

    def deal(self):
        if not self.cards:
            return None
        return self.cards.pop()

# Example usage:
deck = Deck()
deck.shuffle()
card = deck.deal()
if card:
  print(f"Dealt card: {card[0]} of {card[1]}")