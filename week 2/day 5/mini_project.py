# -*- coding: utf-8 -*-
"""mini project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0-qaOFMS1UfUazq9AYv5myey7sVMesO

mini-project: Rock, Paper, ScissorsRock-paper-scissors is an old game that can be played between two people. You can read about it in wikipediaWe will create a game for the user to play Rock-paper-scissors against the computer.The user will input his/her move (rock/paper/scissors),and the computer will select either rock, paper or scissors at random.We will then compare the user%E2%80%99s move with the computer%E2%80%99s move, and determine the results of the game:The user wonThe computer won (the user lost)A draw (tie)We will print the outcome of each game: the user%E2%80%99s choice, the computer%E2%80%99s choice, and the result.The user will be able to play again and again. Once the user decides to exit the program, we will print a summary of the outcomes of all the games: how many times they won, lost or and tied the computer.Here%E2%80%99s some example output:InstructionsCreate a new directory for the game. Inside it, create 2 files:rock-paper-scissors.py %E2%80%93 this will contain functions to show the main menu, handle user%E2%80%99s input, and show the game summary before exiting.game.py %E2%80%93 this will contain a Game class which will have functions to play a single game of rock-paper-scissors against the computer, determine the game%E2%80%99s result, and return the result.StepsPart I - game.pygame.py %E2%80%93 this file/module should contain a class called Game. It should have 4 methods:get_user_item(self) %E2%80%93 Ask the user to select an item (rock/paper/scissors). Keep asking until the user has selected one of the items %E2%80%93 use data validation and looping. Return the item at the end of the function.get_computer_item(self) %E2%80%93 Select rock/paper/scissors at random for the computer. Return the item at the end of the function. Use python%E2%80%99s random.choice() function (read about it online).get_game_result(self, user_item, computer_item) %E2%80%93 Determine the result of the game.Parameters:user_item %E2%80%93 the user%E2%80%99s chosen item (rock/paper/scissors)computer_item %E2%80%93 the computer%E2%80%99s chosen (random) item (rock/paper/scissors)Return either win, draw, or loss. Where win means that the user has won, draw means the user and the computer got the same item, and loss means that the user has lost.play(self) %E2%80%93 the function that will be called from outside the class (ie. from rock-paper-scissors.py). It will do 3 things:Get the user%E2%80%99s item (rock/paper/scissors) and remember itGet a random item for the computer (rock/paper/scissors) and remember itDetermine the results of the game by comparing the user%E2%80%99s item and the computer%E2%80%99s itemPrint the output of the game; something like this: %E2%80%9CYou selected rock. The computer selected paper. You lose%E2%80%9D, %E2%80%9CYou selected scissors. The computer selected scissors. You drew!%E2%80%9DReturn the results of the game as a string: win;draw;loss;, where win means that the user has won, draw means the user and the computer got the same item, and loss means that the user has lost.Part II - rock-paper-scissors.pyrock-paper-scissors.py : create 3 functionsget_user_menu_choice() - this should display a simple menu, get the user%E2%80%99s choice (with data validation), and return the choice. No looping should occur here.The possibles choices are : Play a new game or Show scores or Quitprint_results(results) %E2%80%93 this should print the results of the games played. It should have a single parameter named results; which will be a dictionary of the results of the games played. It should display these results in a user-friendly way, and thank the user for playing.Note: results should be in this form: {win: 2,loss: 4,draw: 3}. Bear in mind that this dictionary will need to be created and populated in some other part of our code, and passed in to the print_results function at the right time.main() - the main function. It should take care of 3 things:Displaying the menu repeatedly, until the user types in the value to exit the program: %E2%80%98x%E2%80%99 or %E2%80%98q%E2%80%99, whatever you decide. (Make use of the get_user_menu_choice function)When the user chooses to play a game:Create a new Game object (see below), and call its play() function, receiving the result of the game that is returned.Remember the results of every game that is played.When the user chooses to exit the program, call the print_results function in order to display a summary of all the games played.
"""

# prompt: create a rock paper sissor game

import random

class Game:
    def get_user_item(self):
        while True:
            user_item = input("Choose rock, paper, or scissors: ").lower()
            if user_item in ["rock", "paper", "scissors"]:
                return user_item
            else:
                print("Invalid input. Please choose rock, paper, or scissors.")

    def get_computer_item(self):
        return random.choice(["rock", "paper", "scissors"])

    def get_game_result(self, user_item, computer_item):
        if user_item == computer_item:
            return "draw"
        elif (user_item == "rock" and computer_item == "scissors") or \
             (user_item == "paper" and computer_item == "rock") or \
             (user_item == "scissors" and computer_item == "paper"):
            return "win"
        else:
            return "loss"

    def play(self):
        user_item = self.get_user_item()
        computer_item = self.get_computer_item()
        result = self.get_game_result(user_item, computer_item)

        print(f"You selected {user_item}. The computer selected {computer_item}.")
        if result == "win":
            print("You win!")
        elif result == "draw":
            print("You drew!")
        else:
            print("You lose.")

        return result


def get_user_menu_choice():
    print("\nMenu:")
    print("1. Play a new game")
    print("2. Show scores")
    print("3. Quit")
    choice = input("Enter your choice: ")
    return choice


def print_results(results):
    print("\nGame Summary:")
    print(f"Wins: {results.get('win', 0)}")
    print(f"Losses: {results.get('loss', 0)}")
    print(f"Draws: {results.get('draw', 0)}")
    print("Thank you for playing!")


def main():
    results = {"win": 0, "loss": 0, "draw": 0}
    while True:
        choice = get_user_menu_choice()
        if choice == '1':
            game = Game()
            result = game.play()
            results[result] += 1
        elif choice == '2':
            print_results(results)
        elif choice in ['3', 'q', 'x']:
            print_results(results)
            break
        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()