# -*- coding: utf-8 -*-
"""daily challenge gold

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PJktoWCggpynoVIuojeJmhYBXzHRiP6v

Instructions :
This challenge is about Biology that will put emphasis on your knowledge of classes, inheritance and polymorphism.

Build a DNA object. DNA is composed of chromosomes which is itself composed of Genes.
A Gene is a single value 0 or 1, it can mutate (flip).
A Chromosome is a series of 10 Genes. It also can mutate, meaning a random number of genes can randomly flip (1/2 chance to flip).
A DNA is a series of 10 chromosomes, and it can also mutate the same way Chromosomes can mutate.

Implement these classes as you see fit.

Create a new class called Organism that accepts a DNA object and an environment parameter that sets the probability for its DNA to mutate.

Instantiate a number of Organism and let them mutate until one gets to a DNA which is only made of 1s. Then stop and record the number of generations (iterations) it took.
Write your results in you personal biology research notebook and tell us your conclusion :).
"""

import random

class Gene:
    def __init__(self):
        self.value = random.randint(0, 1)

    def mutate(self):
        self.value = 1 - self.value

class Chromosome:
    def __init__(self):
        self.genes = [Gene() for _ in range(10)]

    def mutate(self):
        for gene in self.genes:
            if random.random() < 0.5:
                gene.mutate()

class DNA:
    def __init__(self):
        self.chromosomes = [Chromosome() for _ in range(10)]

    def mutate(self):
        for chromosome in self.chromosomes:
            chromosome.mutate()

    def is_all_ones(self):
        for chromosome in self.chromosomes:
            for gene in chromosome.genes:
                if gene.value == 0:
                    return False
        return True

class Organism:
    def __init__(self, environment=0.1):
        self.dna = DNA()
        self.environment = environment

    def mutate(self):
        if random.random() < self.environment:
            self.dna.mutate()

# Simulation
organisms = [Organism(environment=0.2) for _ in range(100)]
generations = 0

while True:
    generations += 1
    for organism in organisms:
        organism.mutate()
        if organism.dna.is_all_ones():
            print(f"An organism reached all 1s DNA after {generations} generations.")
            break
    else:
        continue
    break


# Research Notebook Entry:
# Experiment: Evolution of All-Ones DNA
#
# Hypothesis: Organisms with a higher mutation probability will reach the all-ones DNA state faster.
#
# Method: Simulated 100 organisms with a mutation probability of 0.2, observing their DNA over generations.
#
# Results: An organism reached a DNA state composed entirely of 1s after X generations (where X is the printed output).  The number of generations is variable due to the probabilistic nature of mutations.

# Conclusion: The simulation demonstrates the basic principles of genetic mutation and evolution.  Even with a relatively low mutation probability, a random change in the DNA of an organism may over many generations result in the desired state. Further experiments could involve different mutation probabilities, population sizes, and methods to speed up the evolution process.