# -*- coding: utf-8 -*-
"""xp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17xq-ZaBAbDVKCddK_3eohzh1BjVTH8E-

Exercise 1 : Pets
Instructions
Using this code:

class Pets():
    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())

class Cat():
    is_lazy = True

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'

class Bengal(Cat):
    def sing(self, sounds):
        return f'{sounds}'

class Chartreux(Cat):
    def sing(self, sounds):
        return f'{sounds}'


Create another cat breed named Siamese which inherits from the Cat class.
Create a list called all_cats, which holds three cat instances : one Bengal, one Chartreux and one Siamese.
Those three cats are Sara‚Äôs pets. Create a variable called sara_pets which value is an instance of the Pet class, and pass the variable all_cats to the new instance.
Take all the cats for a walk, use the walk method.
"""

class Pets():
    def __init__(self, animals):
        self.animals = animals

    def walk(self):
        for animal in self.animals:
            print(animal.walk())
            class Cat():
                         is_lazy = True

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def walk(self):
        return f'{self.name} is just walking around'
        class Bengal(Cat):
         def sing(self, sounds):
          return f'{sounds}'
class Chartreux(Cat):
    def sing(self, sounds):
        return f'{sounds}'
        class Siamese(Cat):
         def sing(self, sounds):
           return f'{sounds}'
all_cats=['bengal cat','chartreux cat','siamese cat']
sara_pets=Pets(all_cats)
sara_pets.walk()

"""Exercise 2 : Dogs
Instructions
Create a class called Dog with the following attributes name, age, weight.
Implement the following methods in the Dog class:
bark: returns a string which states: ‚Äú<dog_name> is barking‚Äù.
run_speed: returns the dogs running speed (weight/age*10).
fight : takes a parameter which value is another Dog instance, called other_dog. This method returns a string stating which dog won the fight. The winner should be the dog with the higher run_speed x weight.

"""

class Dog:
    def __init__(self,name,age,weight):
        self.name=name
        self.age=age
        self.weight=weight
        def bark(self,name):
            return(f'{self.name} is barking')
        def run_speed(self):
            return(self.weight/self.age*10)
            def fight(self,other_dog):
                if self.run_speed*self.weight>other_dog.run_speed*other_dog.weight:
                    return(f'{self.name} won the fight')

"""
üåü Exercise 3 : Dogs Domesticated
Instructions
Create a new python file and import your Dog class from the previous exercise.
In the new python file, create a class named PetDog that inherits from Dog.
Add an attribute called trained to the __init__ method, this attribute is a boolean and the value should be False by default.
Add the following methods:
train: prints the output of bark and switches the trained boolean to True

play: takes a parameter which value is a few names of other Dog instances (use *args). The method should print the following string: ‚Äúdog_names all play together‚Äù.

do_a_trick: If the dog is trained the method should print one of the following sentences at random:
‚Äúdog_name does a barrel roll‚Äù.
‚Äúdog_name stands on his back legs‚Äù.
‚Äúdog_name shakes your hand‚Äù.
‚Äúdog_name plays dead‚Äù.
"""

