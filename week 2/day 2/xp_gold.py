# -*- coding: utf-8 -*-
"""xp gold

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PJktoWCggpynoVIuojeJmhYBXzHRiP6v

Exercise 1: Bank Account
Instructions
Part I:

Create a class called BankAccount that contains the following attributes and methods:
balance - (an attribute)
__init__ : initialize the attribute
deposit : - (a method) accepts a positive int and adds to the balance, raise an Exception if the int is not positive.
withdraw : - (a method) accepts a positive int and deducts from the balance, raise an Exception if not positive


Part II : Minimum balance account

Create a MinimumBalanceAccount that inherits from BankAccount.
Extend the __init__ method and accept a parameter called minimum_balance with a default value of 0.
Override the withdraw method so it only allows the user to withdraw money if the balance remains higher than the minimum_balance, raise an Exception if not.


Part III: Expand the bank account class

Add the following attributes to the BankAccount class:
username
password
authenticated (False by default)

Create a method called authenticate. This method should accept 2 strings : a username and a password. If the username and password match the attributes username and password the method should set the authenticated boolean to True.

Edit withdraw and deposit to only work if authenticated is set to True, if someone tries an action without being authenticated raise an Exception


Part IV: BONUS Create an ATM class

__init__:
Accepts the following parameters: account_list and try_limit.

Validates that account_list contains a list of BankAccount or MinimumBalanceAccount instances.
Hint: isinstance()

Validates that try_limit is a positive number, if you get an invalid input raise an Exception, then move along and set try_limit to 2.
Hint: Check out this tutorial

Sets attribute current_tries = 0

Call the method show_main_menu (see below)

Methods:
show_main_menu:
This method will start a while loop to display a menu letting a user select:
Log in : Will ask for the users username and password and call the log_in method with the username and password (see below).
Exit.

log_in:
Accepts a username and a password.

Checks the username and the password against all accounts in account_list.
If there is a match (ie. use the authenticate method), call the method show_account_menu.
If there is no match with any existing accounts, increment the current tries by 1. Continue asking the user for a username and a password, until the limit is reached (ie. try_limit attribute). Once reached display a message saying they reached max tries and shutdown the program.

show_account_menu:
Accepts an instance of BankAccount or MinimumBalanceAccount.
The method will start a loop giving the user the option to deposit, withdraw or exit.
"""

class BankAccount:
    def __init__(self, username, password, balance=0):
        self.balance = balance
        self.username = username
        self.password = password
        self.authenticated = False

    def authenticate(self, username, password):
        if username == self.username and password == self.password:
            self.authenticated = True
        else:
            raise Exception("Authentication failed.")

    def deposit(self, amount):
        if not self.authenticated:
            raise Exception("Not authenticated.")
        if amount > 0:
            self.balance += amount
        else:
            raise Exception("Deposit amount must be positive.")

    def withdraw(self, amount):
        if not self.authenticated:
            raise Exception("Not authenticated.")
        if amount > 0 and self.balance >= amount :
            self.balance -= amount
        else:
            raise Exception("Withdrawal amount must be positive and not exceed the balance.")


class MinimumBalanceAccount(BankAccount):
    def __init__(self, username, password, minimum_balance=0, balance=0):
        super().__init__(username, password, balance)
        self.minimum_balance = minimum_balance

    def withdraw(self, amount):
        if not self.authenticated:
            raise Exception("Not authenticated.")
        if amount > 0 and self.balance - amount >= self.minimum_balance:
            self.balance -= amount
        else:
            raise Exception("Withdrawal amount exceeds minimum balance.")


class ATM:
    def __init__(self, account_list, try_limit=2):
        if not all(isinstance(account, (BankAccount, MinimumBalanceAccount)) for account in account_list):
            raise Exception("Invalid account list.")

        if try_limit <= 0:
            raise Exception("Try limit must be positive.")

        self.account_list = account_list
        self.try_limit = try_limit
        self.current_tries = 0
        self.show_main_menu()

    def show_main_menu(self):
        while True:
            print("\n1. Log in")
            print("2. Exit")

            choice = input("Enter your choice: ")

            if choice == "1":
                self.log_in()
            elif choice == "2":
                print("Exiting...")
                break
            else:
                print("Invalid choice.")

    def log_in(self):
      username = input("Enter username: ")
      password = input("Enter password: ")

      for account in self.account_list:
          try:
              account.authenticate(username, password)
              self.show_account_menu(account)
              return
          except Exception as e:
              print(e)
              pass  # Continue to the next account

      self.current_tries += 1
      print(f"Incorrect username or password. Tries remaining {self.try_limit - self.current_tries}")
      if self.current_tries >= self.try_limit:
          print("Maximum login attempts reached. Exiting...")
          exit()

    def show_account_menu(self, account):
        while True:
            print("\n1. Deposit")
            print("2. Withdraw")
            print("3. Exit")

            choice = input("Enter your choice: ")
            if choice == "1":
                try:
                    amount = float(input("Enter deposit amount: "))
                    account.deposit(amount)
                    print(f"Deposited {amount}, new balance {account.balance}")
                except Exception as e:
                    print(e)
            elif choice == "2":
                try:
                    amount = float(input("Enter withdrawal amount: "))
                    account.withdraw(amount)
                    print(f"Withdrew {amount}, new balance: {account.balance}")
                except Exception as e:
                    print(e)
            elif choice == "3":
                print("Exiting account menu...")
                break
            else:
                print("Invalid choice.")