# -*- coding: utf-8 -*-
"""xp ninja

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kaC0CjJUtZwTDI9tks1Nit5BfbUrtxnu

Exercise 1&2 : Exploratory Data Analysis (Hard)
Objective: Implement a data-driven decision-making process.

Exploratory Data Analysis (EDA) is a process in data analysis where various techniques are used to understand, summarize, and visualize the underlying structure and characteristics of a dataset.

Task:

Follow the steps of EDA on this medium post
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


try:
    titanic_df = pd.read_csv('titanic.csv')
except FileNotFoundError:
    print("Error: 'titanic.csv' not found. Please ensure the file is in the current directory or provide the correct path.")
    exit()


# 1. Data Overview
print(titanic_df.head())
print(titanic_df.info())
print(titanic_df.describe())

print(titanic_df.isnull().sum())
titanic_df.drop('Cabin', axis=1, inplace=True)
titanic_df['Age'].fillna(titanic_df['Age'].median(), inplace=True)


plt.figure(figsize=(8, 6))
plt.hist(titanic_df['Age'], bins=20)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Distribution of Age')
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='Pclass', y='Fare', data=titanic_df)
plt.title('Fare Distribution by Passenger Class')
plt.show()


plt.figure(figsize=(8, 6))
sns.countplot(x='Survived', hue='Sex', data=titanic_df)
plt.title('Survival Count by Sex')
plt.show()


plt.figure(figsize=(10, 8))
correlation_matrix = titanic_df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()


plt.figure(figsize=(8, 6))
plt.scatter(titanic_df['Age'], titanic_df['Fare'])
plt.xlabel('Age')
plt.ylabel('Fare')
plt.title('Age vs. Fare')
plt.show()

# Pairplot to explore relationships between multiple features
sns.pairplot(titanic_df[['Age', 'Fare', 'Pclass', 'Survived']], hue='Survived')
plt.show()


#Further Analysis (Examples):
#Group by Pclass and analyze survival rates

pclass_survival = titanic_df.groupby('Pclass')['Survived'].mean()
print(pclass_survival)

"""Exercise 3: Exploratory Data Analysis (EDA) on the Iris Dataset
Background

The Iris dataset is one of the most famous datasets used for practicing data analysis and machine learning. It contains measurements of iris flowers of three different species. The dataset includes features like sepal length, sepal width, petal length, and petal width. This exercise focuses on exploring this dataset to find patterns and insights.

Dataset Overview

The Iris dataset typically includes the following columns:

SepalLengthCm: Length of the sepal in centimeters.
SepalWidthCm: Width of the sepal in centimeters.
PetalLengthCm: Length of the petal in centimeters.
PetalWidthCm: Width of the petal in centimeters.
Species: Species of the iris flower (Setosa, Versicolour, Virginica).
Exercise Steps

Data Loading
Load the Iris dataset into a DataFrame using a data analysis library like pandas in Python.

Data Inspection

Use methods like .head(), .info(), and .describe() to get an overview of the dataset.
Identify the unique species present in the dataset and their distribution.
Data Visualization

Visualize the distribution of each feature (sepal length, sepal width, petal length, petal width) using histograms.
Create scatter plots to explore the relationships between each pair of features.
Exploratory Analysis

Univariate Analysis: Assess the distribution of each feature for different iris species.
Bivariate Analysis: Investigate the relationships between pairs of features for each species.
Multivariate Analysis: Explore complex relationships involving all features and species.
Insight Generation

Identify key characteristics that differentiate each iris species based on the flower measurements.
Highlight any interesting patterns or anomalies discovered during the analysis.
Advanced Visualization

Use boxplots to compare the distribution of features across different species.
Create pair plots or heatmaps to visualize the correlation between all features.

"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

try:
    iris_df = pd.read_csv('Iris.csv')
except FileNotFoundError:
    print("Error: 'Iris.csv' not found. Please ensure the file is in the current directory or provide the correct path.")
    exit()

# Data Inspection
print(iris_df.head())
print(iris_df.info())
print(iris_df.describe())
print(iris_df['Species'].value_counts())

# Data Visualization - Histograms
iris_df.hist(figsize=(10, 8))
plt.suptitle("Distribution of Features", fontsize=16)
plt.show()


# Data Visualization - Scatter Plots
sns.pairplot(iris_df, hue='Species')
plt.show()


# Exploratory Analysis - Univariate Analysis (Box Plots)
plt.figure(figsize=(10, 6))
iris_df.boxplot(by='Species', figsize=(12, 6))
plt.suptitle("Boxplots of Features by Species")
plt.show()


# Bivariate analysis - Relationships between pairs of features for each species
# Example: Scatterplot of Sepal Length vs Sepal Width
sns.scatterplot(x='SepalLengthCm', y='SepalWidthCm', hue='Species', data=iris_df)
plt.title('Sepal Length vs Sepal Width')
plt.show()

# Correlation Matrix and Heatmap
correlation_matrix = iris_df.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Iris Features')
plt.show()


# Multivariate Analysis:
# You could explore relationships in 3D plots or other more complex visualizations
# But for this dataset pairplot and heatmap provide a comprehensive insight already.