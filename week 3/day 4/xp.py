# -*- coding: utf-8 -*-
"""xp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RwJvIm4H-JHIbQ1xLuV8PFiRSb7kWwNJ

üåü Exercise 1: Understanding Data Visualization
Task: Explain why data visualization is important in data analysis.
Task: Describe the purpose of a line graph in data visualization.
"""

# Data visualization is crucial in data analysis for several reasons:

# 1. Quickly Identify Patterns and Trends:  Visual representations of data
#    allow analysts to quickly spot trends, patterns, and outliers that might
#    be missed when examining raw data.  The human brain is naturally adept at
#    processing visual information, making it easier to grasp complex datasets.

# 2. Communicate Insights Effectively:  Visualizations provide a clear and
#    concise way to communicate complex findings to both technical and
#    non-technical audiences.  A well-designed chart can convey information
#    more effectively than tables or text alone, making it easier for stakeholders
#    to understand the implications of the analysis.

# 3. Explore Data Relationships: Visualizations help explore relationships
#    between different variables in the dataset. Scatter plots, for instance, can
#    reveal correlations, while heatmaps can illustrate the strength of
#    relationships across multiple variables.

# 4. Identify Anomalies and Outliers: Visualizations can highlight unusual data
#    points or anomalies that might indicate errors or interesting phenomena
#    worth investigating further.

# 5. Support Hypothesis Testing:  Visualizations can provide initial evidence
#    to support or refute hypotheses, guiding further analysis and potentially
#    revealing new research questions.

# 6. Enhance Decision-Making: By presenting data in a clear and accessible format,
#    visualizations enable better-informed decision-making based on data-driven
#    insights.


# Purpose of a Line Graph:

# A line graph is used primarily to visualize data points connected over a
# continuous interval or time series. It's particularly effective for:

# 1. Showing Trends Over Time:  Line graphs excel at illustrating how a variable
#    changes over time. For example, plotting sales figures over months or years.

# 2. Comparing Trends:  Multiple lines on the same graph can be used to compare
#    trends of different variables or groups over the same time period.

# 3. Identifying Changes in Slope: Changes in the slope of a line can reveal
#    accelerating or decelerating trends, periods of growth or decline, and other
#    important shifts in the data.

# 4. Predicting Future Behavior: While not a definitive predictive tool, line
#    graphs can help identify patterns and trends that may suggest future behavior
#    of the variable being measured.

# In summary, a line graph is best suited for displaying data that changes
# continuously over time, allowing for easy visualization of trends, comparisons,
# and potential future behavior.

""" Exercise 2: Creating a Line Plot for Temperature Variation
Objective: Create a simple line plot using Matplotlib that represents temperature variations over a week.
Tasks:
Use a list of temperature values for each day of the week (e.g., [72, 74, 76, 80, 82, 78, 75]).
Label the x-axis as ‚ÄúDay‚Äù and the y-axis as ‚ÄúTemperature (¬∞F)‚Äù.
Add a title to the plot.
Display the plot.

"""

import matplotlib.pyplot as plt

# Temperature data for each day of the week
temperatures = [72, 74, 76, 80, 82, 78, 75]
days = list(range(1, 8))  # Represent days as 1 to 7

# Create the line plot
plt.plot(days, temperatures)

# Add labels and title
plt.xlabel("Day")
plt.ylabel("Temperature (¬∞F)")
plt.title("Temperature Variation Over a Week")

# Display the plot
plt.show()

""" Exercise 3: Visualizing Monthly Sales with a Bar Chart
Objective: Generate a bar chart using Matplotlib to visualize monthly sales data for a retail store.
Tasks:
Create a list of sales values for each month (e.g., [5000, 5500, 6200, 7000, 7500]).
Label the x-axis as ‚ÄúMonth‚Äù and the y-axis as ‚ÄúSales Amount ($)‚Äù.
Add a title to the bar chart.
Display the plot.

"""

import matplotlib.pyplot as plt

# Monthly sales data
sales = [5000, 5500, 6200, 7000, 7500]
months = ['Jan', 'Feb', 'Mar', 'Apr', 'May']  # Example months

# Create the bar chart
plt.bar(months, sales)

# Add labels and title
plt.xlabel("Month")
plt.ylabel("Sales Amount ($)")
plt.title("Monthly Sales")

# Display the plot
plt.show()

"""üåü Exercise 4: Visualizing the Distribution of CGPA
Objective: Create a histogram to visualize the distribution of students‚Äô CGPA.
Dataset Overview: Assume the CGPA data is categorized into ranges and loaded in a DataFrame named df.
Tasks:
Import necessary libraries.
Use Seaborn‚Äôs histplot to create a histogram of the CGPA categories.
Customize the histogram with a specific color and add a title.
Display the plot.



"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Sample CGPA data (replace with your actual data)
data = {'CGPA': [2.5, 3.0, 3.2, 3.5, 3.8, 3.9, 4.0, 2.8, 3.1, 3.6, 3.7, 2.9]}
df = pd.DataFrame(data)

# Create the histogram using Seaborn
plt.figure(figsize=(8, 6))  # Adjust figure size as needed
sns.histplot(df['CGPA'], bins=5, color='skyblue', kde=True) # Use kde for density curve

# Customize the plot
plt.title('Distribution of CGPA')
plt.xlabel('CGPA')
plt.ylabel('Frequency')

# Display the plot
plt.show()

""" Exercise 5: Comparing Anxiety Levels Across Different Genders
Objective: Use a bar plot to compare the proportion of students experiencing anxiety across different genders.
Dataset Overview: The dataset includes columns: ‚ÄòDo you have Anxiety?‚Äô and ‚ÄòChoose your gender‚Äô.
Tasks:
Import necessary libraries.
Use Seaborn to create a bar plot comparing anxiety levels across genders from the dataset df.
Customize the plot with an appropriate color palette and add a title.
Display the plot.

"""

import matplotlib.pyplot as plt
# Assuming 'df' is your DataFrame with 'Do you have Anxiety?' and 'Choose your gender' columns.
# If not, replace 'df' with the actual DataFrame name.

plt.figure(figsize=(8, 6))
sns.countplot(x='Choose your gender', hue='Do you have Anxiety?', data=df, palette='viridis')
plt.title('Anxiety Levels Across Different Genders')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

"""Exercise 6: Exploring the Relationship Between Age and Panic Attacks
Objective: Create a scatter plot to explore the relationship between students‚Äô age and the occurrence of panic attacks.
Dataset Overview: The dataset includes columns: ‚ÄòAge‚Äô and ‚ÄòDo you have Panic Attacks?‚Äô.
Tasks:
Import necessary libraries.
Convert panic attack responses to numeric values (e.g., Yes=1, No=0).
Use Seaborn‚Äôs scatterplot to create a scatter plot with ‚ÄòAge‚Äô on the x-axis and numeric panic attack responses on the y-axis.
Customize the plot to improve readability by adding labels, a title, and adjusting point styles.
Display the plot.

"""

import matplotlib.pyplot as plt
# Convert 'Do you have Panic Attacks?' to numeric values
df['Panic_Attacks_Numeric'] = df['Do you have Panic Attacks?'].map({'Yes': 1, 'No': 0})

# Create the scatter plot
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age', y='Panic_Attacks_Numeric', data=df, hue='Panic_Attacks_Numeric', palette='viridis', s=100)  # Adjust point size (s) as needed
plt.title('Relationship Between Age and Panic Attacks')
plt.xlabel('Age')
plt.ylabel('Panic Attacks (1=Yes, 0=No)')
plt.show()